// automatically generated by the FlatBuffers compiler, do not modify

namespace feather.fbs
{
    using FlatBuffers;

    struct CategoryMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CategoryMetadata GetRootAsCategoryMetadata(ByteBuffer _bb) { return GetRootAsCategoryMetadata(_bb, new CategoryMetadata()); }
  public static CategoryMetadata GetRootAsCategoryMetadata(ByteBuffer _bb, CategoryMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CategoryMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The category codes are presumed to be integers that are valid indexes into
  /// the levels array
  public PrimitiveArray? Levels { get { int o = __p.__offset(4); return o != 0 ? (PrimitiveArray?)(new PrimitiveArray()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool Ordered { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<CategoryMetadata> CreateCategoryMetadata(FlatBufferBuilder builder,
      Offset<PrimitiveArray> levelsOffset = default(Offset<PrimitiveArray>),
      bool ordered = false) {
    builder.StartObject(2);
    CategoryMetadata.AddLevels(builder, levelsOffset);
    CategoryMetadata.AddOrdered(builder, ordered);
    return CategoryMetadata.EndCategoryMetadata(builder);
  }

  public static void StartCategoryMetadata(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddLevels(FlatBufferBuilder builder, Offset<PrimitiveArray> levelsOffset) { builder.AddOffset(0, levelsOffset.Value, 0); }
  public static void AddOrdered(FlatBufferBuilder builder, bool ordered) { builder.AddBool(1, ordered, false); }
  public static Offset<CategoryMetadata> EndCategoryMetadata(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CategoryMetadata>(o);
  }
};


}
