// automatically generated by the FlatBuffers compiler, do not modify

namespace feather.fbs
{
    using FlatBuffers;

    struct PrimitiveArray : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PrimitiveArray GetRootAsPrimitiveArray(ByteBuffer _bb) { return GetRootAsPrimitiveArray(_bb, new PrimitiveArray()); }
  public static PrimitiveArray GetRootAsPrimitiveArray(ByteBuffer _bb, PrimitiveArray obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PrimitiveArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Type Type { get { int o = __p.__offset(4); return o != 0 ? (Type)__p.bb.GetSbyte(o + __p.bb_pos) : Type.BOOL; } }
  public Encoding Encoding { get { int o = __p.__offset(6); return o != 0 ? (Encoding)__p.bb.GetSbyte(o + __p.bb_pos) : Encoding.PLAIN; } }
  /// Relative memory offset of the start of the array data excluding the size
  /// of the metadata
  public long Offset { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// The number of logical values in the array
  public long Length { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// The number of observed nulls
  public long NullCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// The total size of the actual data in the file
  public long TotalBytes { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<PrimitiveArray> CreatePrimitiveArray(FlatBufferBuilder builder,
      Type type = Type.BOOL,
      Encoding encoding = Encoding.PLAIN,
      long offset = 0,
      long length = 0,
      long null_count = 0,
      long total_bytes = 0) {
    builder.StartObject(6);
    PrimitiveArray.AddTotalBytes(builder, total_bytes);
    PrimitiveArray.AddNullCount(builder, null_count);
    PrimitiveArray.AddLength(builder, length);
    PrimitiveArray.AddOffset(builder, offset);
    PrimitiveArray.AddEncoding(builder, encoding);
    PrimitiveArray.AddType(builder, type);
    return PrimitiveArray.EndPrimitiveArray(builder);
  }

  public static void StartPrimitiveArray(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddType(FlatBufferBuilder builder, Type type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddEncoding(FlatBufferBuilder builder, Encoding encoding) { builder.AddSbyte(1, (sbyte)encoding, 0); }
  public static void AddOffset(FlatBufferBuilder builder, long offset) { builder.AddLong(2, offset, 0); }
  public static void AddLength(FlatBufferBuilder builder, long length) { builder.AddLong(3, length, 0); }
  public static void AddNullCount(FlatBufferBuilder builder, long nullCount) { builder.AddLong(4, nullCount, 0); }
  public static void AddTotalBytes(FlatBufferBuilder builder, long totalBytes) { builder.AddLong(5, totalBytes, 0); }
  public static Offset<PrimitiveArray> EndPrimitiveArray(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PrimitiveArray>(o);
  }
};


}
