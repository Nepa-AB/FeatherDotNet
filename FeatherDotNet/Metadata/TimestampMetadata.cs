// automatically generated by the FlatBuffers compiler, do not modify

namespace feather.fbs
{

    using FlatBuffers;
    using System;

    struct TimestampMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TimestampMetadata GetRootAsTimestampMetadata(ByteBuffer _bb) { return GetRootAsTimestampMetadata(_bb, new TimestampMetadata()); }
  public static TimestampMetadata GetRootAsTimestampMetadata(ByteBuffer _bb, TimestampMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TimestampMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TimeUnit Unit { get { int o = __p.__offset(4); return o != 0 ? (TimeUnit)__p.bb.GetSbyte(o + __p.bb_pos) : TimeUnit.SECOND; } }
  /// Timestamp data is assumed to be UTC, but the time zone is stored here for
  /// presentation as localized
  public string Timezone { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTimezoneBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<TimestampMetadata> CreateTimestampMetadata(FlatBufferBuilder builder,
      TimeUnit unit = TimeUnit.SECOND,
      StringOffset timezoneOffset = default(StringOffset)) {
    builder.StartObject(2);
    TimestampMetadata.AddTimezone(builder, timezoneOffset);
    TimestampMetadata.AddUnit(builder, unit);
    return TimestampMetadata.EndTimestampMetadata(builder);
  }

  public static void StartTimestampMetadata(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddUnit(FlatBufferBuilder builder, TimeUnit unit) { builder.AddSbyte(0, (sbyte)unit, 0); }
  public static void AddTimezone(FlatBufferBuilder builder, StringOffset timezoneOffset) { builder.AddOffset(1, timezoneOffset.Value, 0); }
  public static Offset<TimestampMetadata> EndTimestampMetadata(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TimestampMetadata>(o);
  }
};


}
