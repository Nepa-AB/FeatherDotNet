// automatically generated by the FlatBuffers compiler, do not modify

namespace feather.fbs
{

    using FlatBuffers;
    using System;

    struct CTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CTable GetRootAsCTable(ByteBuffer _bb) { return GetRootAsCTable(_bb, new CTable()); }
  public static CTable GetRootAsCTable(ByteBuffer _bb, CTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Some text (or a name) metadata about what the file is, optional
  public string Description { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(4); }
  public long NumRows { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Column? Columns(int j) { int o = __p.__offset(8); return o != 0 ? (Column?)(new Column()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ColumnsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Version number of the Feather format
  public int Version { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Table metadata (likely JSON), not yet used
  public string Metadata { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMetadataBytes() { return __p.__vector_as_arraysegment(12); }

  public static Offset<CTable> CreateCTable(FlatBufferBuilder builder,
      StringOffset descriptionOffset = default(StringOffset),
      long num_rows = 0,
      VectorOffset columnsOffset = default(VectorOffset),
      int version = 0,
      StringOffset metadataOffset = default(StringOffset)) {
    builder.StartObject(5);
    CTable.AddNumRows(builder, num_rows);
    CTable.AddMetadata(builder, metadataOffset);
    CTable.AddVersion(builder, version);
    CTable.AddColumns(builder, columnsOffset);
    CTable.AddDescription(builder, descriptionOffset);
    return CTable.EndCTable(builder);
  }

  public static void StartCTable(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(0, descriptionOffset.Value, 0); }
  public static void AddNumRows(FlatBufferBuilder builder, long numRows) { builder.AddLong(1, numRows, 0); }
  public static void AddColumns(FlatBufferBuilder builder, VectorOffset columnsOffset) { builder.AddOffset(2, columnsOffset.Value, 0); }
  public static VectorOffset CreateColumnsVector(FlatBufferBuilder builder, Offset<Column>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartColumnsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVersion(FlatBufferBuilder builder, int version) { builder.AddInt(3, version, 0); }
  public static void AddMetadata(FlatBufferBuilder builder, StringOffset metadataOffset) { builder.AddOffset(4, metadataOffset.Value, 0); }
  public static Offset<CTable> EndCTable(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CTable>(o);
  }
  public static void FinishCTableBuffer(FlatBufferBuilder builder, Offset<CTable> offset) { builder.Finish(offset.Value); }
};


}
