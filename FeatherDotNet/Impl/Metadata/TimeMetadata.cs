// automatically generated by the FlatBuffers compiler, do not modify

namespace feather.fbs
{
    using FlatBuffers;

    struct TimeMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TimeMetadata GetRootAsTimeMetadata(ByteBuffer _bb) { return GetRootAsTimeMetadata(_bb, new TimeMetadata()); }
  public static TimeMetadata GetRootAsTimeMetadata(ByteBuffer _bb, TimeMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TimeMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TimeUnit Unit { get { int o = __p.__offset(4); return o != 0 ? (TimeUnit)__p.bb.GetSbyte(o + __p.bb_pos) : TimeUnit.SECOND; } }

  public static Offset<TimeMetadata> CreateTimeMetadata(FlatBufferBuilder builder,
      TimeUnit unit = TimeUnit.SECOND) {
    builder.StartObject(1);
    TimeMetadata.AddUnit(builder, unit);
    return TimeMetadata.EndTimeMetadata(builder);
  }

  public static void StartTimeMetadata(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddUnit(FlatBufferBuilder builder, TimeUnit unit) { builder.AddSbyte(0, (sbyte)unit, 0); }
  public static Offset<TimeMetadata> EndTimeMetadata(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TimeMetadata>(o);
  }
};


}
